// This file was generated by WTL Dialog wizard 
// OpinionDlg.cpp : Implementation of COpinionDlg

#include "stdafx.h"
#include "OpinionDlg.h"
#include "TSelfStart.h"
#include "Globe.h"

//WTL的CHotCtrl把MOD_SHIFT和MOD_ALT两个值搞反了
//这个函数把它们调过来才行
//对CHotCtrl设置快捷键之前，或者读取快捷键之后，都要用这个函数将快捷键的MOD参数处理一下
//tianzuo,2008-11-27
WORD FIX_CHOTKEY_BUG(WORD dwMod)
{
	if (dwMod&MOD_SHIFT)
	{
		dwMod &= ~MOD_SHIFT;
		dwMod |= MOD_ALT;
	}
	else if (dwMod&MOD_ALT)
	{
		dwMod &= ~MOD_ALT;
		dwMod |= MOD_SHIFT;
	}
	return dwMod;
}

// COpinionDlg
COpinionDlg::COpinionDlg()
{
	m_bChkStartinfo = FALSE;
}

COpinionDlg::~COpinionDlg()
{
}

LRESULT COpinionDlg::OnInitDialog(UINT uMsg, WPARAM wParam, LPARAM lParam, BOOL& bHandled)
{
	DlgResize_Init(false);
	//是否保存过这个窗口的大小，如果是，改变其大小
	Globe::ReadDlgSizeFromDB(*this,IDD);

	// center the dialog on the screen
	CenterWindow();

	// set icons
	HICON hIcon = (HICON)::LoadImage(_Module.GetResourceInstance(), MAKEINTRESOURCE(IDR_MAINFRAME), 
		IMAGE_ICON, ::GetSystemMetrics(SM_CXICON), ::GetSystemMetrics(SM_CYICON), LR_DEFAULTCOLOR);
	SetIcon(hIcon, TRUE);
	HICON hIconSmall = (HICON)::LoadImage(_Module.GetResourceInstance(), MAKEINTRESOURCE(IDR_MAINFRAME), 
		IMAGE_ICON, ::GetSystemMetrics(SM_CXSMICON), ::GetSystemMetrics(SM_CYSMICON), LR_DEFAULTCOLOR);
	SetIcon(hIconSmall, FALSE);

	char buf[_MAX_PATH];
	::GetModuleFileName(NULL,buf,_MAX_PATH);
	TSelfStart tss("GreenTimer",buf);

	m_bChkSelfStart = tss.IsSelfStart()?TRUE:FALSE;

	m_hotkeyOpenTask = GetDlgItem(IDC_HOTKEY_TASKLIST);
	m_hotkeyOpenNotify = GetDlgItem(IDC_HOTKEY_NOTIFY);

	DWORD dw = Globe::GetHotKeyOpenTask();
	m_hotkeyOpenTask.SetHotKey(LOWORD(dw),FIX_CHOTKEY_BUG(HIWORD(dw)));
	dw = Globe::GetHotKeyOpenNotify();
	m_hotkeyOpenNotify.SetHotKey(LOWORD(dw),FIX_CHOTKEY_BUG(HIWORD(dw)));

	DoDataExchange();
	return 1;  // Let the system set the focus
}

LRESULT COpinionDlg::OnClickedOK(WORD wNotifyCode, WORD wID, HWND hWndCtl, BOOL& bHandled)
{
	DoDataExchange(TRUE);

	WORD dw1,dw2;
	m_hotkeyOpenTask.GetHotKey(dw1,dw2);
	dw2 = FIX_CHOTKEY_BUG(dw2);
	Globe::SetHotKeyOpenTask(MAKELONG(dw1,dw2));

	m_hotkeyOpenNotify.GetHotKey(dw1,dw2);
	dw2 = FIX_CHOTKEY_BUG(dw2);
	Globe::SetHotKeyOpenNotify(MAKELONG(dw1,dw2));

	Globe::SaveDlgSizeToDB(*this,IDD);
	EndDialog(wID);
	return 0;
}

LRESULT COpinionDlg::OnClickedCancel(WORD wNotifyCode, WORD wID, HWND hWndCtl, BOOL& bHandled)
{
	Globe::SaveDlgSizeToDB(*this,IDD);
	EndDialog(wID);
	return 0;
}

LRESULT COpinionDlg::OnClickedSelfStart( WORD wNotifyCode, WORD wID, HWND hWndCtl, BOOL& bHandled )
{
	DoDataExchange(TRUE);

	char buf[_MAX_PATH];
	::GetModuleFileName(NULL,buf,_MAX_PATH);
	TSelfStart tss("GreenTimer",buf);

	if(m_bChkSelfStart)
	{
		tss.SetSelfStart();
	}
	else
	{
		tss.RemoveSelfStart();
	}

	return 0;
}